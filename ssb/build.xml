<?xml version="1.0" encoding="UTF-8"?>
<project name="com.ue.sailpoint.build" default="war">

    <!--
        Default is to build local-dev.  To override target environment, add the
        following to your ANT command line:
           -Due.env=local-build   (or whichever target you want)

        Sample ANT command-lines:
            Build local-dev war only:
                ant war
    -->

    <!-- PUBLIC TARGETS -->
    <target name="war" depends="buildWar" />

    <!-- System environment -->
    <property environment="env"/>

    <!-- local-dev is default value - set from command line with -Due.env=FOO -->
    <property name="ue.env" value="local-dev" />
    <property name="ue.env.ssb" value="ssb-v6.1" />

    <!-- Constants for where things are -->
    <property name="ue.envconfig.path" value="./envconfig/${ue.env}" />
    <property name="ue.build.workdir" location="./build/" />
    <property name="ue.build.releasedir" location="./release/" />
    <property name="ue.build.war" location="${ue.build.workdir}/build/deploy/identityiq.war" />
    <property name="ue.build.war.md5" location="${ue.build.war}.MD5" />

    <property name="ue.dist.releasedir" location="../release/" />

    <!-- Location of libraries -->
    <property name="ue.lib.antcontrib" location="build-lib/ant-contrib-1.0b3.jar" />

    <!-- Load AntContrib -->
    <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${ue.lib.antcontrib}" />

    <!-- loadConfig - Loads all configuration settings -->
    <target name="loadConfig">
        <echo message="Building using configuration: ${ue.env}" />

        <property file="${ue.envconfig.path}/build.properties"/>
        <property name="ue.release.warfilename" value="ue#${ue.env}-${IIQVersion}${IIQPatchLevel}.war" />
        <property name="ue.release.war" location="${ue.build.releasedir}/${ue.release.warfilename}" />
        <property name="ue.release.war.md5" location="${ue.release.war}.MD5" />
    </target>

    <!-- Clean - removes all files from the work directory -->
    <target name="clean">
        <echo message="Cleaning work folder" />

        <mkdir dir="${ue.build.workdir}"/>
        <mkdir dir="${ue.build.releasedir}"/>
        <mkdir dir="${ue.dist.releasedir}"/>
        <delete includeEmptyDirs="true" failonerror="true">
            <fileset dir="${ue.build.workdir}" includes="**" defaultexcludes="false" />
            <fileset dir="${ue.build.releasedir}" includes="**" defaultexcludes="false" />
        </delete>
    </target>

    <!-- copyComponents - Loads the list of components from the env config and
                          copies all the component folders to the work folder
                          If files conflict, last component wins.
    -->
    <target name="copyComponents" depends="loadConfig">
        <echo message="******************************************" />
        <echo message="*** Copying Components" />
        <echo message="******************************************" />

        <echo message="****** Copying binaries" />
        <unzip src="components/${ue.env.ssb}/${ue.env.ssb}.zip" dest="${ue.build.workdir}" overwrite="true"/>
				
        <echo message="****** Removing example scripts" />
        <delete dir="${ue.build.workdir}/scripts" includes="build.custom*" />

		<echo message="****** Checking if Accelerator Pack is Enabled" />
			<if>
			    <equals arg1="${deployAcceleratorPack}" arg2="true"/>
			    <then>
			        <if>
			            <available file="components/iiq${IIQVersion}/base/ap/Accelerator_Pack-${IIQVersion}-${acceleratorPackVersion}.zip"/>
			            <then>
			                <property name="acceleratorPackZipName" value="Accelerator_Pack-${IIQVersion}-${acceleratorPackVersion}.zip"/>
			            </then>
			        </if>
			        <if>
			            <available file="components/iiq${IIQVersion}/base/ap/Accelerator_Pack_${IIQVersion}-${acceleratorPackVersion}.zip"/>
			            <then>
			                <property name="acceleratorPackZipName" value="Accelerator_Pack_${IIQVersion}-${acceleratorPackVersion}.zip"/>
			            </then>
			        </if>
			        <if>
			            <available file="components/iiq${IIQVersion}/base/ap/Accelerator_Pack-${acceleratorPackVersion}.zip"/>
			            <then>
			                <property name="acceleratorPackZipName" value="Accelerator_Pack-${acceleratorPackVersion}.zip"/>
			            </then>
			        </if>
			        <if>
			            <available file="components/iiq${IIQVersion}/base/ap/Accelerator_Pack-${IIQVersion}.zip"/>
			            <then>
			                <property name="acceleratorPackZipName" value="Accelerator_Pack-${IIQVersion}.zip"/>
			            </then>
			        </if>

			        <if>
			            <or>
			                <equals arg1="${acceleratorPackZipName}" arg2=""/>
			                <not>
			                    <isset property="acceleratorPackZipName"/>
			                </not>
			            </or>
			            <then>
			                <property name="critical.failure"
			                          value="Could not find Accelerator Pack binaries for the specified Accelerator Pack version ${acceleratorPackVersion} and IdentityIQ version ${IIQVersion} in the /base/ap directory.
			                          You can download these files from https://community.sailpoint.com "/>
			                <fail message="${critical.failure}"/>
			            </then>
			        </if>


			        <trycatch property="critical.failure">
			            <try>
			                <echo>Overlaying Object Properties XML files onto SSB</echo>
			                <unzip dest="components/ap" src="components/iiq${IIQVersion}/base/ap/${acceleratorPackZipName}" />	
							
							<copy todir="../uedocker/volumes/app-scripts" file="${ue.envconfig.path}/add_identityiq_extensions.mysql" />

							<loadfile property="ue.AccleratorPack.set" srcfile="${ue.envconfig.path}/components.txt">      
							     <filterchain>       
							       <linecontainsregexp>
									   <regexp pattern="^ap.*"/>
							       </linecontainsregexp>      
							     </filterchain>   
							</loadfile>
							
							<if>
								<contains string="${ue.AccleratorPack.set}" substring="ap"/>
								<then>
									<echo>Accelerator Pack already added to components.txt</echo>
								</then>
								<else>
									<echo>Adding Accelerator Pack to components.txt</echo>
									<echo file="${ue.envconfig.path}/components.txt" append="true">${line.separator}ap</echo>
								</else>
							</if>
			            </try>
			            <catch>
			                <echo>Critical failure while extracting Accelerator Pack zip file.</echo>
			                <fail message="${critical.failure}"/>
			            </catch>
			        </trycatch>
				  
			    </then>
			</if>

        <copy todir="${ue.build.workdir}" file="${ue.envconfig.path}/components.txt" />
        <fixcrlf srcdir="${ue.build.workdir}" includes="components.txt" eof="remove" />
        <loadfile property="ue.components" srcFile="${ue.build.workdir}/components.txt" />
		<for list="${ue.components}" param="component" delimiter="${line.separator}">
            <sequential>
                <if>
                    <and>
                        <matches string="@{component}" pattern="^\s*[^\s].*$"/>
                        <not>
                            <matches string="@{component}" pattern="^\s*((#)|(//)).*$"/>
                        </not>
                    </and>
                    <then>
                        <echo message="****** Copying Component: [@{component}]" />
                        <copy todir="${ue.build.workdir}" overwrite="true">
                            <fileset dir="components/@{component}">
                                <exclude name="**/dev/**"/>
                                <exclude name="**/archive/**"/>
                                <exclude name="**/*.generated.xml"/>
                            </fileset>
                        </copy>
                    </then>
                </if>
            </sequential>
        </for>
		

			
	        <echo message="****** Copying envconfig" />
	        <copy todir="${ue.build.workdir}" overwrite="true">
	            <fileset dir="${ue.envconfig.path}">
	                <exclude name="**/dev/**"/>
	                <exclude name="**/archive/**"/>
					<exclude name="*.mysql"/>
	            </fileset>
	        </copy>
		
    </target>

    <!-- extenddb - extends IIQ schema for Accelerator Pack -->	
    <target name="extenddb" description="extends the DB schema per hbm customizations. requires alignment with objectConfig.">
        <if>
            <equals arg1="${usingDbSchemaExtensions}" arg2="true"/>
            <then>
                <echo>extending db schema via "iiq extendedSchema"</echo>
                <if>
                    <isset property="is-windows"/>
                    <then>
                        <echo>running windows flavor</echo>
                        <exec executable="cmd.exe" dir="${ue.build.workdir}/build/extract/WEB-INF/bin">
                            <arg value="/c"/>
                            <arg value="iiq.bat"/>
                            <arg value="extendedSchema"/>
                        </exec>
                    </then>
                    <else>
                        <echo>running *nix flavor</echo>
                        <property name="iiq.script.nix.perms" value="ug+rx"/>
                        <echo>setting execute permissions on "iiq" script to ${iiq.script.nix.perms} first</echo>
                        <chmod file="${ue.build.workdir}/build/extract/WEB-INF/bin/iiq" perm="${iiq.script.nix.perms}"/>
                        <exec executable="./iiq" dir="${ue.build.workdir}/build/extract/WEB-INF/bin">
                            <arg value="extendedSchema"/>
                        </exec>
                    </else>
                </if>

                <property name="schemaExtensionFile.default" value="${ue.build.workdir}/build/extract/WEB-INF/database/add_identityiq_extensions.${db.type}"/>
                <property name="schemaExtensionFile.tokenReplaced" value="${schemaExtensionFile.default}.tokenReplaced"/>
                <echo>created all flavors of extentions files, but our concern is: ${schemaExtensionFile.default}</echo>

                <!-- create our copy to actually edit -->
                <copy 
                    overwrite="true"
                    file="${schemaExtensionFile.default}"
                    tofile="${schemaExtensionFile.tokenReplaced}"/>

                <!-- do the DB file hacking -->
                <if>
                    <equals arg1="${db.type}" arg2="mysql"/>
                    <then>
                        <!-- mess with the alter table stmts - whitespace is relevant here! -->
                        <replace 
                            file="${schemaExtensionFile.tokenReplaced}"
                            casesensitive="false"
                            token=" table identityiq."
                            value=" table  ${db.name}."/>
                        <!-- mess with index stmts - whitespace is relevant here!-->
                        <replace 
                            file="${schemaExtensionFile.tokenReplaced}"
                            casesensitive="false"
                            token=" on identityiq."
                            value=" on  ${db.name}."/>
                        <!-- mess with use stmt -->
                        <replace 
                            file="${schemaExtensionFile.tokenReplaced}"
                            casesensitive="false"
                            token="USE identityiq;"
                            value="USE  ${db.name};"/>
                        <!-- inject a comment at end so we tatoo our target in SSB did this -->
                        <concat destfile="${schemaExtensionFile.tokenReplaced}" append="true">
                            -- created this DDL file with extenddb SSB target
                        </concat>
                    </then>
                </if>

                <if>
                    <equals arg1="${db.type}" arg2="sqlserver"/>
                    <then>
                        <!-- mess with the alter table stmts - whitespace is relevant here! -->
                        <replace 
                            file="${schemaExtensionFile.tokenReplaced}"
                            casesensitive="false"
                            token=" table identityiq."
                            value=" table  ${db.name}."/>
                        <!-- mess with index stmts - whitespace is relevant here!-->
                        <replace 
                            file="${schemaExtensionFile.tokenReplaced}"
                            casesensitive="false"
                            token=" on identityiq."
                            value=" on  ${db.name}."/>
                        <!-- mess with use stmt - whitespace is relevant here! -->
                        <replace 
                            file="${schemaExtensionFile.tokenReplaced}"
                            casesensitive="false"
                            token="USE identityiq"
                            value="USE  ${db.name}"/>
                        <!-- get rid of "go" as it doesn't work - "go" is used for SQL Server mgmt studio, but not for this type of stuff. -->
                    	<replace
                            file="${schemaExtensionFile.tokenReplaced}"
                            token="GO"
                            value=";"
                    		casesensitive="true"/>
                        <!-- inject a comment at end so we tatoo our target in SSB did this -->
                        <concat destfile="${schemaExtensionFile.tokenReplaced}" append="true">
                            -- created this DDL file with extenddb SSB target
                        </concat>
                    </then>
                </if>

                <!-- need to work in oracle and db2 later -->
                <if>
                    <equals arg1="${db.type}" arg2="oracle"/>
                    <then>
                        <echo>${db.type} not handled here at this time!</echo>
                        <fail></fail>
                    </then>
                </if>

                <if>
                    <equals arg1="${db.type}" arg2="db2"/>
                    <then>
                        <echo>${db.type} not handled here at this time!</echo>
                        <fail></fail>
                    </then>
                </if>

                <!-- regardless of db type section here -->
                <echo>our edited file will be: ${schemaExtensionFile.tokenReplaced}</echo>

                <!-- run the actual sql script 
                <iiq.sql.upgrade sql.file="${schemaExtensionFile.tokenReplaced}"/> -->
            </then>
            <else>
                <echo>usingDbSchemaExtensions is false - ignoring extenddb target</echo>
            </else>
        </if>    
    </target>
	

    <!-- buildWar - Calls the SailPoint SSB to build the war
                    Sets the SPTARGET env variable to override the SSB target
    -->
    <target name="buildWar" depends="loadConfig,clean,copyComponents">
        <var name="env.SPTARGET" value="${ue.env}"/> <!-- this is a bit of a hack to set an environment variable - but cannot find another way to inject into the child ANT's environment -->

        <echo message="******************************************" />
        <echo message="*** Building war using SSB script with SPTARGET of: ${env.SPTARGET}" />
        <echo message="******************************************" />

        <!-- With SSB2, changed this to a forked Java invoke due to the XML Tokenization not
             working when using a child ant call
             See http://ant.apache.org/manual/running.html#viajava
        -->
        <!--
        <ant dir="${ue.build.workdir}" antfile="build.xml" inheritall="false" fork="true">
            <target name="war" />
        </ant>
        -->
			
        <java classname="org.apache.tools.ant.launch.Launcher"
              fork="true"
              failonerror="true"
              dir="${ue.build.workdir}"
              timeout="600000"
              taskname="SSB">
            <classpath>
                <pathelement location="${ant.home}/lib/ant-launcher.jar"/>
            </classpath>
            <env key="SPTARGET" value="${ue.env}" />
            <arg value="-logger"/>
            <arg value="org.apache.tools.ant.listener.ProfileLogger"/>
            <arg value="war"/>
        </java>

        <loadfile property="ue.release.war.md5" srcFile="${ue.build.war.md5}"/>

        <echo message="******************************************" />
        <echo message="*** Copying built war to: ${ue.release.war}" />
        <echo message="******************************************" />
        <echo message="*** MD5 of war: ${ue.release.war.md5}" />
        <echo message="******************************************" />
        <copy tofile="${ue.release.war}" file="${ue.build.war}" />
        <copy tofile="${ue.release.war.md5}" file="${ue.build.war.md5}" />
		
        <if>
            <equals arg1="${usingDbSchemaExtensions}" arg2="true"/>
			<then>
				<antcall target="extenddb"/>
				<zip destfile="${ue.release.war}" update="true"> 
					<mappedresources>
			            <fileset dir="${ue.build.workdir}/build/extract/WEB-INF/database">
			                <include name="*.db2" />
			                <include name="*.sqlserver" />
			                <include name="*.oracle" />
			                <include name="*.mysql" />
						</fileset> 
						<globmapper from="*" to="database/*" />
					</mappedresources>
				</zip> 
			</then>
		</if>
		
        <copy todir="${ue.build.releasedir}/database">
          <fileset dir="${ue.build.workdir}/build/extract/WEB-INF/database">
              <include name="*.db2" />
              <include name="*.sqlserver" />
              <include name="*.oracle" />
              <include name="*.mysql" />
          </fileset>
        </copy>
    </target>

    <target name="package" depends="loadConfig,buildWar">
        <!-- Make a distribution zip -->
        <zip destfile="${ue.dist.releasedir}/alm-${ue.env}-${ue.dist.ver}.zip">
            <zipfileset dir="${ue.build.releasedir}" prefix="" />
            <zipfileset dir="../dist" prefix="" />
            <zipfileset dir="../" includes="CHANGELOG.txt" prefix="" />
        </zip>

        <!-- Save the MD5 and SHA-256 of the zip -->
        <checksum file="${ue.dist.releasedir}/alm-${ue.env}-${ue.dist.ver}.zip" algorithm="MD5" fileext=".MD5" forceOverwrite="yes"/>
        <checksum file="${ue.dist.releasedir}/alm-${ue.env}-${ue.dist.ver}.zip" algorithm="SHA-256" fileext=".SHA256" forceOverwrite="yes"/>

        <echo message="******************************************" />
        <echo message="*** Distribution zip: ${ue.dist.releasedir}/alm-${ue.env}-${ue.dist.ver}.zip" />
        <echo message="******************************************" />
    </target>

</project>
